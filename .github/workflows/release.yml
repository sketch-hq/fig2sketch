name: release

on:
  push:
    tags: v[0-9]+.[0-9]+.?[0-9]*

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install maturin
          pip install certifi
          pip install -r requirements.txt
          scripts/install_patched_orjson.sh
          scripts/install_fig_kiwi.sh
          echo "VERSION='${{ github.ref_name }}'" > version.py
          pyinstaller fig2sketch.py -y --onefile
      - name: Rename binary
        run: mv dist/fig2sketch dist/fig2sketch-${{ github.ref_name }}
      - name: zip release
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: 'fig2sketch-linux.zip'
          directory: 'dist'
          path: '*'
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: dist/fig2sketch-linux.zip

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install maturin
          pip install certifi
          pip install -r requirements.txt
          bash scripts/install_patched_orjson.sh
          bash scripts/install_fig_kiwi.sh
          echo "VERSION='${{ github.ref_name }}'" > version.py
          pyinstaller fig2sketch.py -y --onefile
      - name: Rename binary
        run: mv dist/fig2sketch.exe dist/fig2sketch-${{ github.ref_name }}.exe
      - name: zip release
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: 'fig2sketch-windows.zip'
          directory: 'dist'
          path: '*'
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: dist/fig2sketch-windows.zip

  build-macos-x86_64:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install maturin
          pip install certifi
          pip install -r requirements.txt
          scripts/install_patched_orjson.sh
          scripts/install_fig_kiwi.sh
          echo "VERSION='${{ github.ref_name }}'" > version.py
          pyinstaller fig2sketch.py -y --onefile --target-arch x86_64
      - name: Rename binary
        run: mv dist/fig2sketch dist/fig2sketch-${{ github.ref_name }}
      - name: zip release
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: 'fig2sketch-macos-x86_64.zip'
          directory: 'dist'
          path: '*'
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: dist/fig2sketch-macos-x86_64.zip

  build-macos-arm64:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.0
          architecture: x64 # Otherwise the runner will try to download Python arm64, which is not available. x64 has support for both archs (universal2).
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
      - name: Build
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install maturin
          pip install -r requirements.txt
          pip install certifi
          rm -rf /tmp/orjson
          scripts/install_patched_orjson.sh
          scripts/install_fig_kiwi.sh
          echo "VERSION='${{ github.ref_name }}'" > version.py
          pyinstaller fig2sketch.py -y --onefile --target-arch arm64
      - name: Rename binary
        run: mv dist/fig2sketch dist/fig2sketch-${{ github.ref_name }}
      - name: zip release
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: 'fig2sketch-macos-arm64.zip'
          directory: 'dist'
          path: '*'
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: dist/fig2sketch-macos-arm64.zip

  build-macos-universal:
    needs: [ build-macos-x86_64, build-macos-arm64 ]
    runs-on: macos-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: builds
      - name: Create universal binary with lipo
        # Why are we patching the binary?
        # Both binaries are generated by pyinstaller. This works by archiving the python interpreter and .py files
        # and then adding a binary that unarchives the content and runs them (similar to a self-extracting zip).
        # The problem is that it locates the start of the archive inside the binary by looking for a specific magic value.
        # Both binaries (x86_64 and arm64) use the same magic value, so after bundling in a universal binary, the bootloader
        # will always find the first archive, even if it's the wrong architecture. Thus, only one architecture works.
        # The binary patch applied below changes the magic value for only one of the binaries, so we have a different
        # magic value to search for each architecture, which solves the problem.
        # We need to re-sign the binary afterwards since the signature becomes invalid when tweaking the bytes
        run: |
          mkdir x86_64
          mkdir arm64
          mkdir -p dist
          unzip fig2sketch-macos-x86_64.zip -d x86_64/
          unzip fig2sketch-macos-arm64.zip -d arm64/
          hexdump -ve '1/1 "%.2X"' x86_64/fig2sketch-${{ github.ref_name }} | sed "s/4D45490\([0C]\)0B0A0B0E/4D45490\10B0A0B0F/g" | xxd -r -p > x86_64/fig2sketch.patched
          codesign --remove x86_64/fig2sketch.patched
          codesign -s - x86_64/fig2sketch.patched
          lipo -create x86_64/fig2sketch.patched arm64/fig2sketch-${{ github.ref_name }} -output dist/fig2sketch-${{ github.ref_name }}
      - name: zip release
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: 'fig2sketch-macos-universal.zip'
          directory: 'dist'
          path: '*'
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: dist/fig2sketch-macos-universal.zip


  create-release:
    needs: [ build-linux, build-windows, build-macos-x86_64, build-macos-arm64, build-macos-universal ]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: builds
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "fig2sketch-*.zip"
          generateReleaseNotes: true
